package com.antelopesystem.crudframework.jpa.model;

import com.antelopesystem.crudframework.fieldmapper.annotation.MappedField;
import com.antelopesystem.crudframework.fieldmapper.transformer.DateToLongTransformer;
import com.antelopesystem.crudframework.jpa.annotation.JpaCrudEntity;
import com.antelopesystem.crudframework.jpa.ro.BaseJpaRO;
import com.antelopesystem.crudframework.model.BaseCrudEntity;
import org.hibernate.annotations.GenericGenerator;

import javax.persistence.*;
import java.util.Collection;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;

/**
 * Base class for Hibernate entities.
 */
@MappedSuperclass
@JpaCrudEntity
public abstract class JpaBaseEntity extends BaseCrudEntity<Long> {

	//------------------------ Constants -----------------------
	private static final long serialVersionUID = 1L;

	//------------------------ Fields --------------------------
	// UUID - should be generated by Hibernat
	@MappedField(target = BaseJpaRO.class)
	private Long id = 0L;

	@MappedField(target = BaseJpaRO.class, transformer = DateToLongTransformer.class)
	private Date creationTime;

	//------------------------ Public methods ------------------
	//------------------------ Constructors --------------------
	protected JpaBaseEntity() {
		this.creationTime = new Date();
	}

	@Transient
	protected static <T extends JpaBaseEntity> Set<Long> getIds(Set<T> entities) {
		return (Set<Long>) fillIds(entities, new HashSet<Long>());
	}

	//------------------------ Private methods -----------------
	private static <T extends JpaBaseEntity> Collection<Long> fillIds(Collection<T> entities,
			Collection<Long> result) {
		if(null != entities) {
			for(JpaBaseEntity entity : entities) {
				result.add(entity.getId());
			}
			return result;
		}
		return null;
	}


	//------------------------ Field's handlers ----------------
	@Id
	@GeneratedValue(generator = "overrideableGenerator")
	@GenericGenerator(name = "overrideableGenerator", strategy = "com.antelopesystem.crudframework.jpa.OverrideableGeneratedValueGenerator")
	@Column(name = "id")
	@Override
	public Long getId() {
		return id;
	}

	@Override
	public void setId(Long id) {
		this.id = id;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "creation_time", nullable = false, updatable = false)
	@Override
	public Date getCreationTime() {
		return creationTime;
	}

	@Override
	public void setCreationTime(Date creationTime) {
		this.creationTime = creationTime;
	}

	//------------------------ Other public methods ------------
	@SuppressWarnings("EqualsWhichDoesntCheckParameterClass")
	@Override
	public boolean equals(Object o) {
		if(null == o) {
			return false;
		}
		if(this == o) {
			return true;
		}

		JpaBaseEntity that = (JpaBaseEntity) o;

		return getId() == that.getId();
	}

	@Override
	public int hashCode() {
		int result = (int) (getId() ^ (getId() >>> 32));
		result = 31 * result;
		return result;
	}

	@SuppressWarnings("unchecked")
	@Transient
	public <T extends BaseJpaRO> T getRepresentation() {
		T ro = (T) newRepresentation();
		ro.setId(getId());
		ro.setCreationTime(getCreationTime().getTime());
		return ro;
	}

	protected <T extends BaseJpaRO> T newRepresentation() {
		return null;
	}

	@Override
	public boolean exists() {
		return getId() != 0L;
	}
}
	